%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <assert.h>
    #include <string.h>
    #include "codegen.h"

    #define CHECK_NUM(reg) printf("test $1, %s\njnz raisesig\n", reg);
    #define CHECK_LIST(reg) printf("test $1, %s\njz raisesig\n", reg);

    #define MKLIST    printf("subq $16, %%r15\nmovq %s, (%%r15)\nmovq %s, 8(%%r15)\n", kids[0]->regname, kids[1]->regname);
    #define SAVE_REGS \
        for(int i = 0; i < REGCOUNT; i++) { \
            printf("movq %s, -%u(%rbp)\n", registers.regnames[i], (i+1) * 8); \
        } 

    #define LOAD_REGS \
        for(int i = 0; i < REGCOUNT; i++) { \
            printf("movq -%u(%rbp), %s\n", (i+1) * 8, registers.regnames[i]); \
        } 
    
    #define LOAD_ARGS(p) \
        if(p->op != NOP) { \
            op_tree_t* node = p; \
            int counter = 0; \
            while(node->op == FUNARGS) { \
                printf("movq -%u(%rbp), %s\n", 8 * stack_pos_for_reg(&registers, node->kids[1]->regname), registers.regnames[counter]); \
                counter++; \
                node = node->kids[0]; \
            } \
            printf("movq -%u(%rbp), %s\n", 8 * stack_pos_for_reg(&registers, node->regname), registers.regnames[counter]); \
        }

    #define FREE_ARG_REGS(p) \
        if(p->op != NOP) { \
            op_tree_t* node = p; \
            while(node->op == FUNARGS) { \
                FREEREG(node->kids[1]->regname); \
                node = node->kids[0]; \
            } \
            FREEREG(node->regname); \
        }

    registers_t registers = { 
        .regnames = {"%rdi", "%rsi", "%rdx", "%rcx", "%r8", "%r9"}, 
        .regs_used = {0, 0, 0, 0, 0, 0}, 
        .varnames = {NULL, NULL, NULL, NULL, NULL, NULL}
    };
%}
%start reg
%term ASSIGN=1 CONSTANT=2 VARDEF=3 RET=4 ADD=5 MUL=6 VARUSE=7 SUB=8 MKLIST=9 HEADOP = 10 TAILOP = 11 NOTOP=12 ISLISTOP=13 OROP=14 EQOP=15 GTEQOP=16 VARSET=17 GUARDED=18 FUNCALL=19 FUNARG=20 FUNARGS=21 NOP=22

%%
reg:    NOP                 # 0
con:    CONSTANT            # 0
reg:    VARDEF              # 0 # NEWVAR(bnode);
varu:   VARUSE              # 0 # SET_VARREG(bnode)
reg:    varu                # 1 # printf("movq %s", bnode->regname); NEWREG(bnode) printf(", %s\n", bnode->regname);

reg:    con                 # 1 # /* Copy variable into new register */ NEWREG(bnode) printf("movq $%u, %s\nshlq $1, %s\n", kids[0]->val, bnode->regname, bnode->regname);

reg:    RET(con)            # 1 # printf("movq $%u, %%rax\nshlq $1, %%rax\nleave\nret\n", kids[0]->val);
reg:    RET(reg)            # 1 # printf("movq %s, %%rax\nleave\nret\n", kids[0]->regname);

reg:    GUARDED(reg)        # 1 # printf("test $0xFFFFFFFFFFFFFFFF, %s\njz %s\n", kids[0]->regname, (char *) bnode->data); FREEREG(kids[0]->regname)

reg:    VARSET(reg)         # 1 # SET_VARREG(bnode) printf("movq %s, %s\n", kids[0]->regname, bnode->regname); FREEREG(kids[0]->regname)

reg:    ADD(reg, reg)       # 2 # bnode->regname = kids[0]->regname; CHECK_NUM(kids[0]->regname) CHECK_NUM(kids[1]->regname) printf("addq %s, %s\n",kids[1]->regname, bnode->regname); FREEREG(kids[1]->regname)
reg:    MUL(reg, reg)       # 2 # bnode->regname = kids[0]->regname; CHECK_NUM(kids[0]->regname) CHECK_NUM(kids[1]->regname) printf("shrq $1, %s\nimulq %s, %s\n",bnode->regname, kids[1]->regname, bnode->regname); FREEREG(kids[1]->regname)
reg:    SUB(reg, reg)       # 2 # bnode->regname = kids[0]->regname; CHECK_NUM(kids[0]->regname) CHECK_NUM(kids[1]->regname) printf("subq %s, %s\n", kids[1]->regname, bnode->regname); FREEREG(kids[1]->regname)
reg:    MKLIST(reg, reg)    # 4 # bnode->regname = kids[0]->regname; MKLIST printf("leaq 1(%%r15), %s\n", bnode->regname); FREEREG(kids[1]->regname)
reg:    HEADOP(reg)         # 3 # bnode->regname = kids[0]->regname; CHECK_LIST(kids[0]->regname) printf("movq -1(%1$s), %1$s\n", bnode->regname);
reg:    TAILOP(reg)         # 3 # bnode->regname = kids[0]->regname; CHECK_LIST(kids[0]->regname) printf("movq 7(%1$s), %1$s\n", bnode->regname);
reg:    ISLISTOP(reg)       # 1 # bnode->regname = kids[0]->regname; printf("andq $1, %s\nshlq $1, %1$s\n", bnode->regname);
reg:    NOTOP(reg)          # 1 # bnode->regname = kids[0]->regname; CHECK_NUM(kids[0]->regname) printf("xorq $0b10, %s\n", bnode->regname);
reg:    OROP(reg, reg)      # 1 # bnode->regname = kids[0]->regname; CHECK_NUM(kids[0]->regname) CHECK_NUM(kids[1]->regname) printf("orq %s, %s\n", kids[1]->regname, bnode->regname); FREEREG(kids[1]->regname) 
reg:    EQOP(reg, reg)      # 3 # bnode->regname = kids[0]->regname; printf("movq $0, %%rax\ncmpq %s, %s\nlahf\nmovq %%rax, %2$s\nshrq $13, %2$s\nandq $0b10, %2$s\n", kids[1]->regname, bnode->regname); FREEREG(kids[1]->regname)
reg:    GTEQOP(reg, reg)    # 3 # bnode->regname = kids[0]->regname; CHECK_NUM(kids[0]->regname) CHECK_NUM(kids[1]->regname) printf("movq $0b0, %%r11\nmovq $0b10, %%rax\ncmpq %s, %s\ncmovgeq %%rax, %2$s\ncmovl %%r11, %2$s\n", kids[1]->regname, bnode->regname); FREEREG(kids[1]->regname)

reg:    FUNCALL(reg)        # 2 # NEWREG(bnode) SAVE_REGS LOAD_ARGS(kids[0]) printf("call %s\n", (char *) bnode->data); FREE_ARG_REGS(kids[0]) LOAD_REGS printf("movq %%rax, %s\n", bnode->regname);
reg:    FUNARG(reg)         # 2 # bnode->regname = kids[0]->regname; // NEWREG(bnode) printf("movq %s, %s\n", kids[1]->regname, bnode->regname);
reg:    FUNARGS(reg, reg)   # 1
